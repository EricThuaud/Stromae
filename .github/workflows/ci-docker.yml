name: Build docker

on: workflow_dispatch

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: script download and clean Orbeon
        run: |
         chmod +x ./script/getCleanedOrbeon.sh
         ./script/getCleanedOrbeon.sh $ORBEON_URL_CE
        shell: bash
        env:
          ORBEON_URL_CE: https://github.com/orbeon/orbeon-forms/releases/download/tag-release-2017.1-ce/orbeon-2017.1.201706222342-CE.zip

      - name: Build with Maven
        run: mvn clean install
 
      - name: Upload war
        uses: actions/upload-artifact@v2
        with:
          name: war
          path: target/*.war

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Download build
        id: download
        uses: actions/download-artifact@v2
        with:
          name: war
          path: target/

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1.8.4
        with:
          images: opherogel/stromae # list of Docker images to use as base name for tags
 
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ${{ github.ref == 'refs/heads/master' && 'opherogel/stromae:latest' || '' }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}